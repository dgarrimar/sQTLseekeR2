help = "print genes and transcripts filtered out [default %default]",
default = FALSE),
make_option(c("-S", "--Seed"), type = "numeric", help = "Set seed for random processess",
metavar = "NUMERIC", default = 123)
)
opt_parser <- OptionParser(option_list = option_list)
opt <- parse_args(opt_parser)
if ( is.null(trans.expr.p.f) || is.null (indexed.geno.f) || is.null(gene_loc.f) || is.null (output.f) ){
print_help(opt_parser)
stop("Missing/not found input files", call.= FALSE)
}
#!/usr/bin/env Rscript
#### Test gene/SNP association (nominal pass)
#### Diego Garrido MartÃ­n
#### 22/11/2017
## 1. Load libraries and arguments
library(optparse)
library(sQTLseekeR2)
option_list = list(
make_option(c("-t", "--transcript_expr"), type = "character",
help = "Prepared transcript expression RData file", metavar = "FILE"),
make_option(c("-i", "--indexed_geno"), type = "character",
help = "Indexed genotype file", metavar = "FILE"),
make_option(c("-g", "--gene_location"), type = "character",
help = "gene location chunk file", metavar = "FILE"),
make_option(c("-o", "--output"), type = "character", help = "output file",
metavar = "FILE"),
make_option(c("-l", "--ld"), type = "numeric", help = "Cluster SNPs in LD >= ld [default %default]",
metavar = "NUMERIC", default = NULL),
make_option(c("-S", "--Seed"), type = "numeric", help = "Set seed for random processess",
metavar = "NUMERIC", default = 123),
make_option(c("-s", "--svqtl"), action = "store_true",
help = "svQTL test will be performed [default %default]", default = FALSE),
make_option(c("-v", "--verbose"), action = "store_true",
help = "print genes and transcripts filtered out [default %default]",
default = FALSE)
)
opt_parser <- OptionParser(option_list = option_list)
opt <- parse_args(opt_parser)
## 2. Input files: prepared transcript expression, genotypes (indexed) and gene location (chunk)
trans.expr.p.f <- opt$transcript_expr
indexed.geno.f <- opt$indexed_geno
gene.loc.chunk <- opt$gene_location
output.f <- opt$output
svqtl<- opt$svqtl
LD <- opt$ld
if ( is.null(trans.expr.p.f) || is.null (indexed.geno.f) || is.null(gene_loc.f) || is.null (output.f) ){
print_help(opt_parser)
stop("Missing/not found input files", call.= FALSE)
}
gene.loc.chunk
gene.loc.chunk="../work/15/1582c49824ed601feaf40430fc8e49/chunks/chunk_0000000000"
strsplit(gene.loc.chunk)
strsplit(gene.loc.chunk,"7")
strsplit(gene.loc.chunk,"/")
strsplit(gene.loc.chunk,"/")[-1]
unlist(strsplit(gene.loc.chunk,"/"))
rev(unlist(strsplit(gene.loc.chunk,"/")))
rev(unlist(strsplit(gene.loc.chunk,"/")))[1]
tail(unlist(strsplit(gene.loc.chunk,"/")), n=1)
output.f <- sprintf("%s/%s", output.folder, tail(unlist(strsplit(gene.loc.chunk,"/")), n=1))
output.folder="/lala"
output.f <- sprintf("%s/%s", output.folder, tail(unlist(strsplit(gene.loc.chunk,"/")), n=1))
output.f
chunk.name <- gsub("chunk_"," ",tail(unlist(strsplit(gene.loc.chunk,"/")), n=1))
chunk.name
task.id <- gsub("chunk_","",tail(unlist(strsplit(gene.loc.chunk,"/")), n=1))
task.id
as.numeric(task.id)
as.numeric(task.id) == 0
output.f <- sprintf("%s/%s", output.folder, tail(unlist(strsplit(gene.loc.chunk,"/")), n=1))
output.f
output.f <- sprintf("%s/nominal_%s", output.folder, task.id)
output.f
output.f
gsub("chunk_","",tail(unlist(strsplit(gene.loc.chunk,"/")), n=1))
sprintf("%s/nominal_%s", output.folder, task.id)
library(MVLM2)
library(MVLM)
Y<-Y.mvlm
X<-X.mvlm
data <- X
summary(data)
summary(Y)
formula = Y ~ Cont + Cat + Ord
mf <- stats::model.frame(formula = formula, data = data, na.action = NULL)
Y <- stats::model.response(mf, "numeric")
Y <- scale(Y, center = T, scale = F)
n <- nrow(Y)
fmla <- as.character(formula)
formula <- stats::as.formula(paste(fmla[2], '~', fmla[3]))
fit <- lm(formula = formula, data = data)
fit
beta.hat <- stats::coef(fit)
R <- fit$residuals
UU <- car:::Anova(fit)
UU
UU$SSP
SSe <- sum(diag(UU$SSPE))
SS <- lapply(UU$SSP, function(x){sum(diag(x))})
Ss
SS
f.tilde <- unlist(lapply(SS, function(x){x/SSe}))
f.tilde
mvlm2 <- function(formula, data){
# Parse input data
mf <- stats::model.frame(formula = formula, data = data, na.action = NULL)
Y <- stats::model.response(mf, "numeric")
Y <- scale(Y, center = T, scale = F)
n <- nrow(Y)
fmla <- as.character(formula)
formula <- stats::as.formula(paste(fmla[2], '~', fmla[3]))
# Fit lm
fit <- lm(formula = formula, data = data)
# Get from lm fit coefficients and residuals
beta.hat <- stats::coef(fit)
R <- fit$residuals
# Compute sums of squares, f.tildes
UU <- car:::Anova(fit)
SS <- lapply(UU$SSP, function(x){sum(diag(x))})
SSe <- sum(diag(UU$SSPE))
f.tilde <- unlist(lapply(SS, function(x){x/SSe}))
# Degrees of freedom
Df <- UU$df
# df.e <- (n-1) - sum(Df)
df.e <- fit$df.residual
# Get eigenvalues from R
e <- eigen(cov(R)*(n-1)/df.e, symmetric = T, only.values = T)$values
# Compute p.values
pv.acc <- mapply(pv.f, f = f.tilde, df.i = Df, MoreArgs = list(df.e = df.e, lambda = e))
# Output
out <- list('stat' = as.matrix(f.tilde*df.e/Df),
'df' = as.matrix(Df),
'pv' = as.matrix(pv.acc[1,]),
'pv.prec' = as.matrix(pv.acc[2,]),
'beta.hat' = as.matrix(beta.hat),
'data' = list('X' = data, 'Y' = Y),
'formula' = formula)
class(out) <- c('mvlm2', class(out))
return(out)
}
pv.f <- function(f, lambda, df.i, df.e, acc = 1e-14){
pv.davies <- function(f, lambda, df.i, df.e, lim = 50000, acc = 1e-14){
H <- c(rep(df.i, length(lambda)), rep(df.e, length(lambda)))
pv <- CompQuadForm::davies(0, lambda = c(lambda, -f * lambda), h = H, lim = lim, acc = acc)
if(pv$ifault != 0 || pv$Qq < 0 || pv$Qq > 1){
return(pv)
} else {
return(pv$Qq)
}
}
pv <- pv.davies(f = f, lambda = lambda, df.i = df.i, df.e = df.e, acc = acc)
while (length(pv) > 1) {
acc <- acc * 10
pv  <- pv.davies(f = f, lambda = lambda, df.i = df.i, df.e = df.e, acc = acc)
}
# if (pv < acc) {
#   pv <- acc
# }
return(c(pv, acc))
}
print.mvlm2 <- function(x, ...){
pv.name <- 'p-value'
out <- rep(NA, nrow(x$pv))
for(i in 1:length(out)){
out[i] <- format.pval(round(x$pv[i,1],5), eps = x$pv.prec[i,1])
}
out <- data.frame(out,row.names = rownames(x$pv))
names(out) <- pv.name
print(out)
}
summary.mvlm2 <- function(object, ...){
pp <- unlist(object$pv)
out.res <- list('statistic' = object$stat,
'DF' = object$df,
'pvalues' = object$pv,
'p.prec' = object$pv.prec)
class(out.res) <- 'summary.mvlm2'
return(out.res)
}
print.summary.mvlm2 <- function(x, ...){
print.res <- data.frame('Statistic' = x$statistic,
'Nume.DF' = x$DF,
'p-value' = x$pvalues)
# Format p-values for printing
pp <- x$pvalues
pv.print <- rep(NA, length(pp))
for(i in 1:length(pv.print)){
pv.print[i] <- format.pval(round(pp[i], 5), eps = x$p.prec[i,1])
}
print.res[,3] <- pv.print
# Format significant digits on R-Square and test statistic
print.res[,1] <- format(print.res[,1],
trim = T,
digits = 4,
justify = 'right',
width = 10)
# Add significance codes to p-values
print.res <- data.frame(print.res, NA)
names(print.res)[4] <- ''
for(l in 1:nrow(print.res)){
if(pp[l] > 0.1){
print.res[l,4] <- '   '
}
if((pp[l] <= 0.1) & (pp[l] > 0.05)){
print.res[l,4] <- '.  '
}
if((pp[l] <= 0.05) & (pp[l] > 0.01)){
print.res[l,4] <- '*  '
}
if((pp[l] <= 0.01) & (pp[l] > 0.001)){
print.res[l,4] <- '** '
}
if(pp[l] <= 0.001){
print.res[l,4] <- '***'
}
}
print(print.res)
cat('---', fill = T)
cat("Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1")
}
# Required libraries
library(MVLM)
library(car)
library(CompQuadForm)
Y <- as.matrix(Y.mvlm)
X <- X.mvlm
fit <- mvlm2(Y ~ Cont + Cat + Ord, data = X)
summary(fit)
fit2 <- mvlm2(Y ~ Cat + Ord + Cont, data = X)
summary(fit2)
vegan::adonis(Y ~ Cat + Ord + Cont, data = X)
vegan::adonis(dist(Y) ~ Cat + Ord + Cont, data = X)
vegan::adonis(dist(Y) ~ Cont + Ord + Cat, data = X)
?Anova
UU$SSP
gsub("chunk_","",tail(unlist(strsplit(gene.loc.chunk,"/")), n=1))
gsub("chunk_","",tail(unlist(strsplit(gene.loc.chunk,"/")), n=1))
task.id <- gsub("chunk_","",tail(unlist(strsplit(gene.loc.chunk,"/")), n = 1))
task.id <- gsub("chunk_","",tail(unlist(strsplit(gene.loc.chunk,"/")), n = 1))
sqtl.seeker
output.f
task.id <- gsub("chunk_","",tail(unlist(strsplit(gene.loc.chunk,"/")), n = 1))
task.id
output.f
sprintf("%s/nominal_%s", output.folder, task.id)
output.folder
task.id
gsub("chunk_","",tail(unlist(strsplit(gene.loc.chunk,"/")), n = 1))
output.f <- "nominal_000000000"
as.numeric(gsub("nominal_","",output.f)
)
tb<-fread("~/PhD/projects/GTEx/V7/sqtls/run_1/results/tissues/Lung/sqtls_all_permuted.tsv")
library(data.table);tb<-fread("~/PhD/projects/GTEx/V7/sqtls/run_1/results/tissues/Lung/sqtls_all_permuted.tsv")
View(tb)
plot(tb$V8,tb$11)
plot(tb$V8,tb$V11)
plot(tb$V8,log10(tb$V11))
sQTLseekeR2::sqtl.seeker.p
sQTLseekeR2:::compute.empirical.pv()
sQTLseekeR2:::compute.empirical.pv
1000/24
summary(tb$V11)
quantile(tb$V11, probs = seq(0,1,0.05))
quantile(tb$V11, probs = seq(0,1,0.05))
plot(tb$V2,log10(tb$V11))
plot(tb$V2,tb$V11)
plot(tb$V2,tb$V11/60)
plot(tb$V2,tb$V11/60, col = tb$V8)
plot(tb$V2,tb$V11/60, col = as.numeric(tb$V8))
plot(tb$V2,tb$V11/60, col = cut(tb$V8, breaks = 5))
#!/usr/bin/env Rscript
#### Test gene/SNP association (nominal pass)
## 1. Load libraries and arguments
library(optparse)
library(sQTLseekeR2)
option_list = list(
make_option(c("-t", "--transcript_expr"), type = "character",
help = "Prepared transcript expression RData file", metavar = "FILE"),
make_option(c("-i", "--indexed_geno"), type = "character",
help = "Indexed genotype file", metavar = "FILE"),
make_option(c("-g", "--gene_location"), type = "character",
help = "gene location chunk file", metavar = "FILE"),
make_option(c("-o", "--output_file"), type = "character", help = "output file",
metavar = "FILE"),
make_option(c("-l", "--ld"), type = "numeric", help = "Cluster SNPs in LD >= ld [default %default]",
metavar = "NUMERIC", default = NULL),
make_option(c("-S", "--Seed"), type = "numeric", help = "Set seed for random processess",
metavar = "NUMERIC", default = 123),
make_option(c("-s", "--svqtl"), action = "store_true",
help = "svQTL test will be performed [default %default]", default = FALSE),
make_option(c("-v", "--verbose"), action = "store_true",
help = "print genes and transcripts filtered out [default %default]",
default = FALSE)
)
opt_parser <- OptionParser(option_list = option_list)
opt <- parse_args(opt_parser)
## 2. Input files: prepared transcript expression, genotypes (indexed) and gene location (chunk)
trans.expr.p.f <- opt$transcript_expr
indexed.geno.f <- opt$indexed_geno
gene.loc.chunk <- opt$gene_location
output.f <- opt$output_file
svqtl<- opt$svqtl
LD <- opt$ld
if ( is.null(trans.expr.p.f) || is.null (indexed.geno.f) || is.null(gene.loc.chunk) || is.null (output.f) ){
print_help(opt_parser)
stop("Missing/not found input files", call.= FALSE)
}
#!/usr/bin/env Rscript
#### Test gene/SNP association (nominal pass)
## 1. Load libraries and arguments
library(optparse)
library(sQTLseekeR2)
option_list = list(
make_option(c("-t", "--transcript_expr"), type = "character",
help = "Prepared transcript expression RData file", metavar = "FILE"),
make_option(c("-i", "--indexed_geno"), type = "character",
help = "Indexed genotype file", metavar = "FILE"),
make_option(c("-g", "--gene_location"), type = "character",
help = "gene location chunk file", metavar = "FILE"),
make_option(c("-o", "--output_file"), type = "character", help = "output file",
metavar = "FILE"),
make_option(c("-l", "--ld"), type = "numeric", help = "Cluster SNPs in LD >= ld [default %default]",
metavar = "NUMERIC", default = NULL),
make_option(c("-S", "--Seed"), type = "numeric", help = "Set seed for random processess",
metavar = "NUMERIC", default = 123),
make_option(c("-s", "--svqtl"), action = "store_true",
help = "svQTL test will be performed [default %default]", default = FALSE),
make_option(c("-v", "--verbose"), action = "store_true",
help = "print genes and transcripts filtered out [default %default]",
default = FALSE)
)
opt_parser <- OptionParser(option_list = option_list)
opt <- parse_args(opt_parser)
## 2. Input files: prepared transcript expression, genotypes (indexed) and gene location (chunk)
trans.expr.p.f <- opt$transcript_expr
indexed.geno.f <- opt$indexed_geno
gene.loc.chunk <- opt$gene_location
output.f <- opt$output_file
svqtl<- opt$svqtl
LD <- opt$ld
if ( is.null(trans.expr.p.f) || is.null (indexed.geno.f) || is.null(gene.loc.chunk) || is.null (output.f) ){
print_help(opt_parser)
stop("Missing/not found input files", call.= FALSE)
}
trans.expr.p.f<-"../work/01/baeb0d843334c3527823d2f5e90822/tre.df.RData"
gene.loc.chunk<-"../work/01/baeb0d843334c3527823d2f5e90822/nominal_in.4"
genes.bed <- read.table(gene.loc.chunk, header = FALSE, as.is = TRUE)           # Load chunk
colnames(genes.bed) <- c("chr", "start", "end", "geneId")                       # Name chunk
load(trans.expr.p.f)                                                            # Load tre.df
genes <- genes.bed$geneId                                                       # Get gene names
tre.df <- subset(tre.df, geneId %in% genes)                                     # Subset tre.df
set.seed(opt$Seed)
opt$Seed
indexed.geno.f<-"../work/01/baeb0d843334c3527823d2f5e90822/snps-012coded.tsv.bgz"
svqtl
opt$verbose
ld.filter = LD
LD
res1.df <- sqtl.seeker(tre.df, indexed.geno.f, genes.bed,
svQTL = svqtl, verbose = opt$verbose, ld.filter = LD)
set.seed(opt$Seed)
res1.df <- sqtl.seeker(tre.df, indexed.geno.f, genes.bed,
svQTL = svqtl, verbose = opt$verbose, ld.filter = LD)
set.seed(opt$Seed)
res2.df <- sqtl.seeker(tre.df, indexed.geno.f, genes.bed,
svQTL = svqtl, verbose = opt$verbose, ld.filter = LD)
identical(res1.df,res2.df)
res2.df <- sqtl.seeker(tre.df, indexed.geno.f, genes.bed,
svQTL = svqtl, verbose = opt$verbose, ld.filter = LD)
identical(res1.df,res2.df)
res2.df <- sqtl.seeker(tre.df, indexed.geno.f, genes.bed,
svQTL = svqtl, verbose = opt$verbose, ld.filter = LD)
identical(res1.df,res2.df)
res2.df <- sqtl.seeker(tre.df, indexed.geno.f, genes.bed,
svQTL = svqtl, verbose = opt$verbose, ld.filter = LD)
res2.df <- sqtl.seeker(tre.df, indexed.geno.f, genes.bed,
svQTL = svqtl, verbose = opt$verbose, ld.filter = LD)
identical(res1.df,res2.df)
indexed.geno.f<-"../work/1d/d9a8baaa22de0fd33cafce4aa6a27e/nominal_in.2"
set.seed(opt$Seed)
res1.df <- sqtl.seeker(tre.df, indexed.geno.f, genes.bed,
svQTL = svqtl, verbose = opt$verbose, ld.filter = LD)
load(trans.expr.p.f)                                                            # Load tre.df
genes.bed <- read.table(gene.loc.chunk, header = FALSE, as.is = TRUE)           # Load chunk
colnames(genes.bed) <- c("chr", "start", "end", "geneId")                       # Name chunk
genes <- genes.bed$geneId                                                       # Get gene names
tre.df <- subset(tre.df, geneId %in% genes)                                     # Subset tre.df
set.seed(opt$Seed)
res1.df <- sqtl.seeker(tre.df, indexed.geno.f, genes.bed,
svQTL = svqtl, verbose = opt$verbose, ld.filter = LD)
load(trans.expr.p.f)                                                            # Load tre.df
indexed.geno.f<-"../work/01/baeb0d843334c3527823d2f5e90822/snps-012coded.tsv.bgz"
gene.loc.chunk<-"../work/1d/d9a8baaa22de0fd33cafce4aa6a27e/nominal_in.2"
load(trans.expr.p.f)                                                            # Load tre.df
genes.bed <- read.table(gene.loc.chunk, header = FALSE, as.is = TRUE)           # Load chunk
colnames(genes.bed) <- c("chr", "start", "end", "geneId")                       # Name chunk
genes <- genes.bed$geneId                                                       # Get gene names
tre.df <- subset(tre.df, geneId %in% genes)                                     # Subset tre.df
set.seed(opt$Seed)
res1.df <- sqtl.seeker(tre.df, indexed.geno.f, genes.bed,
svQTL = svqtl, verbose = opt$verbose, ld.filter = LD)
res1.df
set.seed(opt$Seed)
res2.df <- sqtl.seeker(tre.df, indexed.geno.f, genes.bed,
svQTL = svqtl, verbose = opt$verbose, ld.filter = LD)
identical(res1.df,res2.df)
?CompQuadForm
?CompQuadForm:::CompQuadForm
?CompQuadForm::davies
set.seed(opt$Seed)
opt$Seed
set.seed(opt$Seed)
res1.df <- sqtl.seeker(tre.df, indexed.geno.f, genes.bed,
svQTL = svqtl, verbose = opt$verbose, ld.filter = LD)
set.seed(opt$Seed)
res2.df <- sqtl.seeker(tre.df, indexed.geno.f, genes.bed,
svQTL = svqtl, verbose = opt$verbose, ld.filter = LD)
identical(res1.df,res2.df)
res1.df-res2.df
res1.df$pv-res2.df$pv
res1.df$pv-res2.df$pv
res1.df$pv-res2.df$pv
res1.df$pv-res2.df$pv
sqtl.seeker
CompQuadForm:::davies
#!/usr/bin/env Rscript
#### Run FDR after nominal pass
## 1. Load libraries and arguments
library(optparse)
library(sQTLseekeR2)
option_list = list(
make_option(c("-a", "--all_tests"), type = "character",
help = "All nominal tests", metavar = "FILE"),
make_option(c("-f", "--fdr"), type = "numeric", help = "FDR level",
metavar = "NUMERIC", default = 123),
make_option(c("-o", "--output"), type = "character",
help = "Output file", metavar = "FILE")
)
opt_parser <- OptionParser(option_list = option_list)
opt <- parse_args(opt_parser)
#!/usr/bin/env Rscript
#### Run FDR after nominal pass
## 1. Load libraries and arguments
library(optparse)
library(sQTLseekeR2)
option_list = list(
make_option(c("-a", "--all_tests"), type = "character",
help = "All nominal tests", metavar = "FILE"),
make_option(c("-f", "--fdr"), type = "numeric", help = "FDR level",
metavar = "NUMERIC", default = 123),
make_option(c("-o", "--output"), type = "character",
help = "Output file", metavar = "FILE")
)
opt_parser <- OptionParser(option_list = option_list)
opt <- parse_args(opt_parser)
opt
#!/usr/bin/env Rscript
#### Run FDR after nominal pass
## 1. Load libraries and arguments
library(optparse)
library(sQTLseekeR2)
option_list = list(
make_option(c("-a", "--all_tests"), type = "character",
help = "All nominal tests", metavar = "FILE"),
make_option(c("-f", "--fdr"), type = "numeric", help = "FDR level",
metavar = "NUMERIC", default = 0.05),
make_option(c("-o", "--output"), type = "character",
help = "Output file", metavar = "FILE"),
make_option(c("-S", "--Seed"), type = "numeric", help = "Set seed for random processess",
metavar = "NUMERIC", default = 123)
)
opt_parser <- OptionParser(option_list = option_list)
opt <- parse_args(opt_parser)
all.tests.f <- opt$all_tests
library(optparse)
library(sQTLseekeR2)
library(data.table)
res.df <- as.data.frame(fread(opt$all_tests, header = TRUE, sep = "\t"), stringsAsFactors = F) # All tests
res.df<-NULL
colnames(res.df)<-c("lala")
data.frame("lala")
data.frame(lala=NULL)
data.frame(lala=1)
data.frame(lala="")
?sqtl.seeker.p
colnms <- c("geneId", "variants.cis", "LD", "best.snp", "best.nominal.pv", "shape1",
"shape2", "nb.perms", "pv.emp", "pv.emp.beta", "runtime")
t(colnms)
write.table(t(colnms), col.names = FALSE, row.names = FALSE, quote = FALSE, sep = "\t")
library(sQTLseekeR2)
trans.exp.f <- "../Data/transExpression.tsv.gz"
gene.bed.f <- "../Data/genes.bed"
genotype.f <- "../Data/snps-012coded.tsv"
setwd("~/PhD/projects/sqtlseeker/NEWsQTLseekeR/sQTLseekeR2/scripts")
genotype.indexed.f <- index.genotype(genotype.f)
te.df <- read.table(trans.exp.f, as.is=TRUE, header=TRUE, sep="\t")
tre.df <- prepare.trans.exp(te.df)
## 3) Test gene/SNP associations
gene.bed <- read.table(gene.bed.f, as.is=TRUE, sep="\t")
colnames(gene.bed) <- c("chr","start","end","geneId")
res.df <- sqtl.seeker(tre.df, genotype.indexed.f, gene.bed, svQTL =
F)
res.f <- "sQTLs-all.tsv"
write.table(res.df, file = res.f, quote = FALSE, row.names = FALSE, sep = "\t")
sqtls.df <- sqtls(res.df, FDR = .01, out.pdf = "sQTLs-FDR01.pdf")
View(res.df)
View(sqtls.df)
sqtls.df <- sqtls(res.df, FDR = .05, out.pdf = "sQTLs-FDR01.pdf")
dim(sqtls.df)
View(sqtls.df)
sqtls.p
